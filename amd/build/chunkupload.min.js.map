{"version":3,"sources":["../src/chunkupload.js"],"names":["init","elementid","acceptedTypes","maxBytes","wwwroot","chunksize","browsetext","wwwRoot","chunkSize","fileinput","filename","progress","progressicon","deleteicon","token","val","parentelem","next","find","change","reset","file","get","files","fileextension","name","indexOf","splits","split","length","Array","notifyError","key","component","param","size","text","startUpload","on","event","params","id","xhr","XMLHttpRequest","open","$","send","stopPropagation","end","start","slice","upload","onprogress","e","setProgress","loaded","onreadystatechange","readyState","status","response","JSON","parse","responseText","error","proceedUpload","setRequestHeader","onerror","notification","alert","total","css","prop","errorstring","done","s","fail","exception"],"mappings":"qLAsBA,OAEA,O,mDAWO,QAASA,CAAAA,CAAT,CAAcC,CAAd,CAAyBC,CAAzB,CAAwCC,CAAxC,CAAkDC,CAAlD,CAA2DC,CAA3D,CAAsEC,CAAtE,CAAkF,IACjFC,CAAAA,CADiF,CAEjFC,CAFiF,CAIjFC,CAJiF,CAItEC,CAJsE,CAI5DC,CAJ4D,CAIlDC,CAJkD,CAIpCC,CAJoC,CAMjFC,CANiF,CAQrFL,CAAS,CAAG,cAAE,IAAMR,CAAN,CAAkB,OAApB,CAAZ,CACAa,CAAK,CAAG,cAAE,IAAMb,CAAR,EAAmBc,GAAnB,EAAR,CACA,GAAIC,CAAAA,CAAU,CAAGP,CAAS,CAACQ,IAAV,EAAjB,CACAP,CAAQ,CAAGM,CAAU,CAACE,IAAX,CAAgB,uBAAhB,CAAX,CACAP,CAAQ,CAAGK,CAAU,CAACE,IAAX,CAAgB,uBAAhB,CAAX,CACAN,CAAY,CAAGI,CAAU,CAACE,IAAX,CAAgB,mBAAhB,CAAf,CACAL,CAAU,CAAGG,CAAU,CAACC,IAAX,EAAb,CACAV,CAAO,CAAGH,CAAV,CACAI,CAAS,CAAGH,CAAZ,CACAI,CAAS,CAACU,MAAV,CAAiB,UAAM,CACnBC,CAAK,GADc,GAEfC,CAAAA,CAAI,CAAGZ,CAAS,CAACa,GAAV,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,CAAvB,CAFQ,CAGfC,CAAa,CAAG,GAHD,CAInB,GAA+B,CAAC,CAA5B,GAAAH,CAAI,CAACI,IAAL,CAAUC,OAAV,CAAkB,GAAlB,CAAJ,CAAmC,CAC/B,GAAIC,CAAAA,CAAM,CAAGN,CAAI,CAACI,IAAL,CAAUG,KAAV,CAAgB,GAAhB,CAAb,CACAJ,CAAa,CAAG,IAAMG,CAAM,CAACA,CAAM,CAACE,MAAP,CAAgB,CAAjB,CAC/B,CACD,GAAI,EAAoB,GAAlB,GAAA3B,CAAa,EACfA,CAAa,WAAY4B,CAAAA,KAAzB,EAA4E,CAAC,CAA1C,GAAA5B,CAAa,CAACwB,OAAd,CAAsBF,CAAtB,CADjC,EACgH,CAA/B,GAAAtB,CAAa,CAACwB,OAAd,CAAsB,GAAtB,CADnF,CAAJ,CAC0H,CACtHjB,CAAS,CAACM,GAAV,CAAc,IAAd,EACAgB,CAAW,CAAC,CAACC,GAAG,CAAE,iBAAN,CAAyBC,SAAS,CAAE,iBAApC,CAAuDC,KAAK,CAAEV,CAA9D,CAAD,CAAX,CACA,MACH,CALD,IAKO,IAAiB,CAAC,CAAd,GAAArB,CAAQ,EAAWkB,CAAI,CAACc,IAAL,CAAYhC,CAAnC,CAA6C,CAChDM,CAAS,CAACM,GAAV,CAAc,IAAd,EACAgB,CAAW,CAAC,CAACC,GAAG,CAAE,kBAAN,CAA0BC,SAAS,CAAE,iBAArC,CAAD,CAAX,CACA,MACH,CACDvB,CAAQ,CAAC0B,IAAT,CAAcf,CAAI,CAACI,IAAnB,EACAY,CAAW,CAAChB,CAAD,CACd,CApBD,EAsBAR,CAAU,CAACyB,EAAX,CAAc,OAAd,CAAuB,SAACC,CAAD,CAAW,CAC9BnB,CAAK,GADyB,GAE1BoB,CAAAA,CAAM,CAAG,CACTC,EAAE,CAAE3B,CADK,CAFiB,CAK1B4B,CAAG,CAAG,GAAIC,CAAAA,cALgB,CAM9BD,CAAG,CAACE,IAAJ,CAAS,MAAT,CAAiBrC,CAAO,CAAG,2CAAV,CAAwDsC,UAAEX,KAAF,CAAQM,CAAR,CAAzE,EACAE,CAAG,CAACI,IAAJ,CAAS,IAAT,EACApC,CAAQ,CAAC0B,IAAT,CAAc9B,CAAd,EACAG,CAAS,CAACM,GAAV,CAAc,IAAd,EACAwB,CAAK,CAACQ,eAAN,EACH,CAXD,EAiBA,QAASV,CAAAA,CAAT,CAAqBhB,CAArB,CAA2B,IACnB2B,CAAAA,CAAG,CAAGxC,CAAS,CAAGa,CAAI,CAACc,IAAjB,CAAwB3B,CAAxB,CAAoCa,CAAI,CAACc,IAD5B,CAEnBK,CAAM,CAAG,CACTS,KAAK,CAAE,CADE,CAETD,GAAG,CAAEA,CAFI,CAGTnB,MAAM,CAAER,CAAI,CAACc,IAHJ,CAITzB,QAAQ,CAAEW,CAAI,CAACI,IAJN,CAKTgB,EAAE,CAAE3B,CALK,CAFU,CASnBoC,CAAK,CAAG7B,CAAI,CAAC6B,KAAL,CAAW,CAAX,CAAcF,CAAd,CATW,CAUnBN,CAAG,CAAG,GAAIC,CAAAA,cAVS,CAWvBD,CAAG,CAACE,IAAJ,CAAS,MAAT,CAAiBrC,CAAO,CAAG,0CAAV,CAAuDsC,UAAEX,KAAF,CAAQM,CAAR,CAAxE,EACAE,CAAG,CAACS,MAAJ,CAAWC,UAAX,CAAwB,SAACC,CAAD,CAAO,CAC3BC,CAAW,CAACD,CAAC,CAACE,MAAH,CAAWlC,CAAI,CAACc,IAAhB,CACd,CAFD,CAGAO,CAAG,CAACc,kBAAJ,CAAyB,UAAM,CAC3B,GAAuB,CAAnB,GAAAd,CAAG,CAACe,UAAR,CAA0B,CACtB,GAAmB,GAAf,GAAAf,CAAG,CAACgB,MAAR,CAAwB,CACpB,GAAIC,CAAAA,CAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWnB,CAAG,CAACoB,YAAf,CAAf,CACA,GAAIH,CAAQ,CAACI,KAAT,SAAJ,CAAkC,CAC9BhC,CAAW,CAAC4B,CAAQ,CAACI,KAAV,CACd,CAFD,IAEO,CACH,GAAIf,CAAG,CAAG3B,CAAI,CAACc,IAAf,CAAqB,CACjB6B,CAAa,CAAC3C,CAAD,CAAOb,CAAP,CAChB,CACJ,CACJ,CACJ,CACJ,CAbD,CAcAkC,CAAG,CAACuB,gBAAJ,CAAqB,cAArB,CAAqC,0BAArC,EACAvB,CAAG,CAACI,IAAJ,CAASI,CAAT,CACH,CAOD,QAASc,CAAAA,CAAT,CAAuB3C,CAAvB,CAA6B4B,CAA7B,CAAoC,IAC5BD,CAAAA,CAAG,CAAGC,CAAK,CAAGzC,CAAR,CAAoBa,CAAI,CAACc,IAAzB,CAAgCc,CAAK,CAAGzC,CAAxC,CAAoDa,CAAI,CAACc,IADnC,CAE5BK,CAAM,CAAG,CACTS,KAAK,CAAEA,CADE,CAETD,GAAG,CAAEA,CAFI,CAGTP,EAAE,CAAE3B,CAHK,CAFmB,CAO5BoC,CAAK,CAAG7B,CAAI,CAAC6B,KAAL,CAAWD,CAAX,CAAkBD,CAAlB,CAPoB,CAQ5BN,CAAG,CAAG,GAAIC,CAAAA,cARkB,CAShCD,CAAG,CAACE,IAAJ,CAAS,MAAT,CAAiBrC,CAAO,CAAG,4CAAV,CAAyDsC,UAAEX,KAAF,CAAQM,CAAR,CAA1E,EACAE,CAAG,CAACS,MAAJ,CAAWC,UAAX,CAAwB,SAACC,CAAD,CAAO,CAC3BC,CAAW,CAACD,CAAC,CAACE,MAAF,CAAWN,CAAZ,CAAmB5B,CAAI,CAACc,IAAxB,CACd,CAFD,CAGAO,CAAG,CAACc,kBAAJ,CAAyB,UAAM,CAC3B,GAAuB,CAAnB,GAAAd,CAAG,CAACe,UAAR,CAA0B,CACtB,GAAmB,GAAf,GAAAf,CAAG,CAACgB,MAAR,CAAwB,CACpB,GAAIC,CAAAA,CAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWnB,CAAG,CAACoB,YAAf,CAAf,CACA,GAAIH,CAAQ,CAACI,KAAT,SAAJ,CAAkC,CAC9BhC,CAAW,CAAC4B,CAAQ,CAACI,KAAV,CACd,CAFD,IAEO,CACH,GAAIf,CAAG,CAAG3B,CAAI,CAACc,IAAf,CAAqB,CACjB6B,CAAa,CAAC3C,CAAD,CAAO2B,CAAP,CAChB,CACJ,CACJ,CACJ,CACJ,CAbD,CAcAN,CAAG,CAACwB,OAAJ,CAAc,UAAM,CAChB9C,CAAK,GAEL+C,UAAaC,KAAb,CAAmB,OAAnB,CAA4B,0BAA5B,CAAwD,IAAxD,CACH,CAJD,CAKA1B,CAAG,CAACuB,gBAAJ,CAAqB,cAArB,CAAqC,0BAArC,EACAvB,CAAG,CAACI,IAAJ,CAASI,CAAT,CACH,CAKD,QAAS9B,CAAAA,CAAT,EAAiB,CACbkC,CAAW,CAAC,CAAD,CAAI,CAAJ,CAAX,CACA5C,CAAQ,CAAC0B,IAAT,CAAc,EAAd,CACH,CAOD,QAASkB,CAAAA,CAAT,CAAqBC,CAArB,CAA6Bc,CAA7B,CAAoC,CAChC,GAAId,CAAM,GAAKc,CAAf,CAAsB,CAElB1D,CAAQ,CAAC2D,GAAT,CAAa,OAAb,CAAsB,GAAtB,CACH,CAHD,IAGO,CACH3D,CAAQ,CAAC2D,GAAT,CAAa,OAAb,CAA+B,GAAT,CAAAf,CAAM,CAASc,CAAf,CAAuB,GAA7C,CACH,CACDzD,CAAY,CAAC2D,IAAb,CAAkB,QAAlB,CAA4BhB,CAAM,GAAKc,CAAvC,EACAxD,CAAU,CAAC0D,IAAX,CAAgB,QAAhB,CAA0BhB,CAAM,GAAKc,CAArC,CACH,CAMD,QAAStC,CAAAA,CAAT,CAAqByC,CAArB,CAAkC,CAC9BpD,CAAK,GACL,GAA2B,QAAvB,QAAOoD,CAAAA,CAAX,CAAqC,CACjC,kBAAY,CACR,CAACxC,GAAG,CAAE,OAAN,CADQ,CAER,CAACA,GAAG,CAAE,IAAN,CAFQ,CAAZ,EAGGyC,IAHH,CAGQ,SAASC,CAAT,CAAY,CACZP,UAAaC,KAAb,CAAmBM,CAAC,CAAC,CAAD,CAApB,CAAyBF,CAAzB,CAAsCE,CAAC,CAAC,CAAD,CAAvC,CACH,CALL,EAMEC,IANF,CAMOR,UAAaS,SANpB,CAOH,CARD,IAQO,CACH,kBAAY,CACR,CAAC5C,GAAG,CAAE,OAAN,CADQ,CAERwC,CAFQ,CAGR,CAACxC,GAAG,CAAE,IAAN,CAHQ,CAAZ,EAIGyC,IAJH,CAIQ,SAASC,CAAT,CAAY,CACZP,UAAaC,KAAb,CAAmBM,CAAC,CAAC,CAAD,CAApB,CAAyBA,CAAC,CAAC,CAAD,CAA1B,CAA+BA,CAAC,CAAC,CAAD,CAAhC,CACH,CANL,EAOEC,IAPF,CAOOR,UAAaS,SAPpB,CAQH,CACJ,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the upload in chunks.\n *\n * @package    local_chunkupload\n * @copyright  2020 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {get_strings} from 'core/str';\nimport notification from 'core/notification';\n\n/**\n * Init\n * @param {String} elementid string The id of the input element\n * @param {String|String[]} acceptedTypes The accepted Types\n * @param {int} maxBytes The maximal allowed amount of bytes\n * @param {string} wwwroot The wwwroot\n * @param {int} chunksize The chunksize in bytes\n * @param {string} browsetext Text to display when no file is uploaded.\n */\nexport function init(elementid, acceptedTypes, maxBytes, wwwroot, chunksize, browsetext) {\n    let wwwRoot,\n        chunkSize;\n\n    let fileinput, filename, progress, progressicon, deleteicon;\n\n    let token;\n\n    fileinput = $('#' + elementid + \"_file\");\n    token = $('#' + elementid).val();\n    let parentelem = fileinput.next();\n    filename = parentelem.find('.chunkupload-filename');\n    progress = parentelem.find('.chunkupload-progress');\n    progressicon = parentelem.find('.chunkupload-icon');\n    deleteicon = parentelem.next();\n    wwwRoot = wwwroot;\n    chunkSize = chunksize;\n    fileinput.change(() => {\n        reset();\n        let file = fileinput.get(0).files[0];\n        let fileextension = \".\";\n        if (file.name.indexOf(\".\") !== -1) {\n            let splits = file.name.split(\".\");\n            fileextension = \".\" + splits[splits.length - 1];\n        }\n        if (!(acceptedTypes === '*' ||\n            acceptedTypes instanceof Array && (acceptedTypes.indexOf(fileextension) !== -1) || acceptedTypes.indexOf('*') !== 1)) {\n            fileinput.val(null);\n            notifyError({key: 'invalidfiletype', component: 'core_repository', param: fileextension});\n            return;\n        } else if (maxBytes !== -1 && file.size > maxBytes) {\n            fileinput.val(null);\n            notifyError({key: 'errorpostmaxsize', component: 'core_repository'});\n            return;\n        }\n        filename.text(file.name);\n        startUpload(file);\n    });\n\n    deleteicon.on('click', (event) => {\n        reset();\n        let params = {\n            id: token\n        };\n        let xhr = new XMLHttpRequest();\n        xhr.open('post', wwwRoot + \"/local/chunkupload/deleteupload_ajax.php?\" + $.param(params));\n        xhr.send(null);\n        filename.text(browsetext);\n        fileinput.val(null);\n        event.stopPropagation();\n    });\n\n    /**\n     * Start the Upload\n     * @param {File} file The File to upload.\n     */\n    function startUpload(file) {\n        let end = chunkSize < file.size ? chunkSize : file.size;\n        let params = {\n            start: 0,\n            end: end,\n            length: file.size,\n            filename: file.name,\n            id: token\n        };\n        let slice = file.slice(0, end);\n        let xhr = new XMLHttpRequest();\n        xhr.open('post', wwwRoot + \"/local/chunkupload/startupload_ajax.php?\" + $.param(params));\n        xhr.upload.onprogress = (e) => {\n            setProgress(e.loaded, file.size);\n        };\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = JSON.parse(xhr.responseText);\n                    if (response.error !== undefined) {\n                        notifyError(response.error);\n                    } else {\n                        if (end < file.size) {\n                            proceedUpload(file, chunkSize);\n                        }\n                    }\n                }\n            }\n        };\n        xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        xhr.send(slice);\n    }\n\n    /**\n     * Proceed the upload\n     * @param {File} file\n     * @param {int} start from where to proceed the upload.\n     */\n    function proceedUpload(file, start) {\n        let end = start + chunkSize < file.size ? start + chunkSize : file.size;\n        let params = {\n            start: start,\n            end: end,\n            id: token\n        };\n        let slice = file.slice(start, end);\n        let xhr = new XMLHttpRequest();\n        xhr.open('post', wwwRoot + \"/local/chunkupload/proceedupload_ajax.php?\" + $.param(params));\n        xhr.upload.onprogress = (e) => {\n            setProgress(e.loaded + start, file.size);\n        };\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = JSON.parse(xhr.responseText);\n                    if (response.error !== undefined) {\n                        notifyError(response.error);\n                    } else {\n                        if (end < file.size) {\n                            proceedUpload(file, end);\n                        }\n                    }\n                }\n            }\n        };\n        xhr.onerror = () => {\n            reset();\n            // Doesn't make sense to try to fetch strings when having internet problems.\n            notification.alert(\"Error\", \"Failure while uploading!\", \"Ok\");\n        };\n        xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        xhr.send(slice);\n    }\n\n    /**\n     * Resets the Progress and the Filepicker name.\n     */\n    function reset() {\n        setProgress(0, 1);\n        filename.text(\"\");\n    }\n\n    /**\n     * Sets the progressbar\n     * @param {int} loaded\n     * @param {int} total\n     */\n    function setProgress(loaded, total) {\n        if (loaded === total) {\n            // Hide progressbar on finish.\n            progress.css('width', '0');\n        } else {\n            progress.css('width', loaded * 100 / total + \"%\");\n        }\n        progressicon.prop('hidden', loaded !== total);\n        deleteicon.prop('hidden', loaded !== total);\n    }\n\n    /**\n     * Notify error\n     * @param {object|string} errorstring Either Object as accepted by get_string, or a string, to describe the error.\n     */\n    function notifyError(errorstring) {\n        reset();\n        if (typeof errorstring === \"string\") {\n            get_strings([\n                {key: 'error'},\n                {key: 'ok'},\n            ]).done(function(s) {\n                    notification.alert(s[0], errorstring, s[1]);\n                }\n            ).fail(notification.exception);\n        } else {\n            get_strings([\n                {key: 'error'},\n                errorstring,\n                {key: 'ok'},\n            ]).done(function(s) {\n                    notification.alert(s[0], s[1], s[2]);\n                }\n            ).fail(notification.exception);\n        }\n    }\n}"],"file":"chunkupload.min.js"}