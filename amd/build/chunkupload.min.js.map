{"version":3,"sources":["../src/chunkupload.js"],"names":["wwwRoot","chunkSize","init","elementid","acceptedTypes","maxBytes","wwwroot","chunksize","fileinput","change","file","get","files","fileextension","name","indexOf","splits","split","length","Array","val","notifyError","key","component","param","size","startUpload","end","params","start","slice","xhr","XMLHttpRequest","open","$","setRequestHeader","send","onreadystatechange","readyState","status","response","JSON","parse","responseText","error","proceedUpload","fid","continuetoken","fileid","errorstring","done","s","notification","alert","fail","exception"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the upload in chunks.\n *\n * @package    local_chunkupload\n * @copyright  2020 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {get_strings} from 'core/str';\nimport notification from 'core/notification';\n\nlet wwwRoot,\n    chunkSize;\n\n/**\n * Init function\n */\nexport function init(elementid, acceptedTypes, maxBytes, wwwroot, chunksize) {\n    const fileinput = $('#' + elementid + \"_file\");\n    wwwRoot = wwwroot;\n    chunkSize = chunksize;\n    fileinput.change(() => {\n        let file = fileinput.get(0).files[0];\n        let fileextension = \".\";\n        if (file.name.indexOf(\".\") !== -1) {\n            let splits = file.name.split(\".\");\n            fileextension = splits[splits.length - 1];\n        }\n        if (!(acceptedTypes === '*' ||\n            (acceptedTypes instanceof Array && acceptedTypes.indexOf(fileextension) !== -1))) {\n            fileinput.val(null);\n            notifyError({key: 'invalidfiletype', component: 'core_repository', param: fileextension});\n            return;\n        } else if (file.size > maxBytes) {\n            fileinput.val(null);\n            notifyError({key: 'errorpostmaxsize', component: 'core_repository'});\n            return;\n        }\n        startUpload(file);\n    });\n}\n\nfunction startUpload(file) {\n    let end = chunkSize < file.size ? chunkSize : file.size;\n    let params = {\n        start: 0,\n        end: end,\n        length: file.size\n    };\n    let slice = file.slice(0, end);\n    let xhr = new XMLHttpRequest();\n    xhr.open('post', wwwRoot + \"/local/chunkupload/startupload_ajax.php?\" + $.param(params));\n    xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n    xhr.send(slice);\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                let response = JSON.parse(xhr.responseText);\n                if (response.error !== undefined) {\n                    notifyError(response.error);\n                } else {\n                    if (end < file.size) {\n                        proceedUpload(file, chunkSize, response.fid, response.continuetoken);\n                    }\n                }\n            }\n        }\n    };\n}\n\nfunction proceedUpload(file, start, fileid, continuetoken) {\n    let end = start + chunkSize < file.size ? start + chunkSize : file.size;\n    let params = {\n        start: start,\n        end: end,\n        continuetoken: continuetoken,\n        fileid: fileid\n    };\n    let slice = file.slice(start, end);\n    let xhr = new XMLHttpRequest();\n    xhr.open('post', wwwRoot + \"/local/chunkupload/proceedupload_ajax.php?\" + $.param(params));\n    xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n    xhr.send(slice);\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                let response = JSON.parse(xhr.responseText);\n                if (response.error !== undefined) {\n                    notifyError(response.error);\n                } else {\n                    if (end < file.size) {\n                        proceedUpload(file, end, fileid, response.continuetoken);\n                    }\n                }\n            }\n        }\n    };\n}\n\nfunction notifyError(errorstring) {\n    if (typeof errorstring === \"string\") {\n        get_strings([\n            {key: 'error'},\n            {key: 'ok'},\n        ]).done(function(s) {\n                notification.alert(s[0], errorstring, s[1]);\n            }\n        ).fail(notification.exception);\n    } else {\n        get_strings([\n            {key: 'error'},\n            errorstring,\n            {key: 'ok'},\n        ]).done(function(s) {\n                notification.alert(s[0], s[1], s[2]);\n            }\n        ).fail(notification.exception);\n    }\n}"],"file":"chunkupload.min.js"}