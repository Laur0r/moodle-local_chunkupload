{"version":3,"sources":["../src/chunkupload.js"],"names":["wwwRoot","chunkSize","init","elementid","acceptedTypes","maxBytes","wwwroot","chunksize","fileinput","change","file","get","files","fileextension","name","indexOf","splits","split","length","Array","val","notifyError","key","component","param","size","startUpload","end","params","start","fileReader","FileReader","slice","readAsText","addEventListener","$","post","result","a","b","console","log","errorstring","done","s","notification","alert","fail","exception"],"mappings":"qLAsBA,OAEA,O,mDAEA,GAAIA,CAAAA,CAAJ,CACIC,CADJ,CAMO,QAASC,CAAAA,CAAT,CAAcC,CAAd,CAAyBC,CAAzB,CAAwCC,CAAxC,CAAkDC,CAAlD,CAA2DC,CAA3D,CAAsE,CACzE,GAAMC,CAAAA,CAAS,CAAG,cAAE,IAAML,CAAN,CAAkB,OAApB,CAAlB,CACAH,CAAO,CAAGM,CAAV,CACAL,CAAS,CAAGM,CAAZ,CACAC,CAAS,CAACC,MAAV,CAAiB,UAAM,IACfC,CAAAA,CAAI,CAAGF,CAAS,CAACG,GAAV,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,CAAvB,CADQ,CAEfC,CAAa,CAAG,GAFD,CAGnB,GAA+B,CAAC,CAA5B,GAAAH,CAAI,CAACI,IAAL,CAAUC,OAAV,CAAkB,GAAlB,CAAJ,CAAmC,CAC/B,GAAIC,CAAAA,CAAM,CAAGN,CAAI,CAACI,IAAL,CAAUG,KAAV,CAAgB,GAAhB,CAAb,CACAJ,CAAa,CAAGG,CAAM,CAACA,CAAM,CAACE,MAAP,CAAgB,CAAjB,CACzB,CACD,GAAI,EAAoB,GAAlB,GAAAd,CAAa,EACdA,CAAa,WAAYe,CAAAA,KAAzB,EAA2E,CAAC,CAA1C,GAAAf,CAAa,CAACW,OAAd,CAAsBF,CAAtB,CADnC,CAAJ,CACsF,CAClFL,CAAS,CAACY,GAAV,CAAc,IAAd,EACAC,CAAW,CAAC,CAACC,GAAG,CAAE,iBAAN,CAAyBC,SAAS,CAAE,iBAApC,CAAuDC,KAAK,CAAEX,CAA9D,CAAD,CAAX,CACA,MACH,CALD,IAKO,IAAIH,CAAI,CAACe,IAAL,CAAYpB,CAAhB,CAA0B,CAC7BG,CAAS,CAACY,GAAV,CAAc,IAAd,EACAC,CAAW,CAAC,CAACC,GAAG,CAAE,kBAAN,CAA0BC,SAAS,CAAE,iBAArC,CAAD,CAAX,CACA,MACH,CACYG,CAAW,CAAChB,CAAD,CAC3B,CAlBD,CAmBH,CAED,QAASgB,CAAAA,CAAT,CAAqBhB,CAArB,CAA2B,IACnBiB,CAAAA,CAAG,CAAG1B,CAAS,CAAGS,CAAI,CAACe,IAAjB,CAAwBxB,CAAxB,CAAoCS,CAAI,CAACe,IAD5B,CAEnBG,CAAM,CAAG,CACTC,KAAK,CAAE,CADE,CAETF,GAAG,CAAEA,CAFI,CAGTT,MAAM,CAAER,CAAI,CAACe,IAHJ,CAFU,CAOnBK,CAAU,CAAG,GAAIC,CAAAA,UAPE,CAQnBC,CAAK,CAAGtB,CAAI,CAACsB,KAAL,CAAW,CAAX,CAAcL,CAAd,CARW,CASvBG,CAAU,CAACG,UAAX,CAAsBD,CAAtB,EACAF,CAAU,CAACI,gBAAX,CAA4B,SAA5B,CAAuC,UAAM,CACzCC,UAAEC,IAAF,CAAOpC,CAAO,CAAG,0CAAV,CAAuDmC,UAAEX,KAAF,CAAQI,CAAR,CAA9D,CAA+EE,CAAU,CAACO,MAA1F,CACI,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACNC,OAAO,CAACC,GAAR,CAAYH,CAAZ,CAAeC,CAAf,CACH,CAHL,CAKH,CAND,CAOH,CAED,QAASlB,CAAAA,CAAT,CAAqBqB,CAArB,CAAkC,CAC9B,kBAAY,CACR,CAACpB,GAAG,CAAE,OAAN,CADQ,CAERoB,CAFQ,CAGR,CAACpB,GAAG,CAAE,IAAN,CAHQ,CAAZ,EAIGqB,IAJH,CAIQ,SAASC,CAAT,CAAY,CACZC,UAAaC,KAAb,CAAmBF,CAAC,CAAC,CAAD,CAApB,CAAyBA,CAAC,CAAC,CAAD,CAA1B,CAA+BA,CAAC,CAAC,CAAD,CAAhC,CACH,CANL,EAOEG,IAPF,CAOOF,UAAaG,SAPpB,CAQH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the upload in chunks.\n *\n * @package    local_chunkupload\n * @copyright  2020 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {get_strings} from 'core/str';\nimport notification from 'core/notification';\n\nlet wwwRoot,\n    chunkSize;\n\n/**\n * Init function\n */\nexport function init(elementid, acceptedTypes, maxBytes, wwwroot, chunksize) {\n    const fileinput = $('#' + elementid + \"_file\");\n    wwwRoot = wwwroot;\n    chunkSize = chunksize;\n    fileinput.change(() => {\n        let file = fileinput.get(0).files[0];\n        let fileextension = \".\";\n        if (file.name.indexOf(\".\") !== -1) {\n            let splits = file.name.split(\".\");\n            fileextension = splits[splits.length - 1];\n        }\n        if (!(acceptedTypes === '*' ||\n            (acceptedTypes instanceof Array && acceptedTypes.indexOf(fileextension) !== -1))) {\n            fileinput.val(null);\n            notifyError({key: 'invalidfiletype', component: 'core_repository', param: fileextension});\n            return;\n        } else if (file.size > maxBytes) {\n            fileinput.val(null);\n            notifyError({key: 'errorpostmaxsize', component: 'core_repository'});\n            return;\n        }\n        let result = startUpload(file);\n    });\n}\n\nfunction startUpload(file) {\n    let end = chunkSize < file.size ? chunkSize : file.size;\n    let params = {\n        start: 0,\n        end: end,\n        length: file.size\n    };\n    let fileReader = new FileReader();\n    let slice = file.slice(0, end);\n    fileReader.readAsText(slice);\n    fileReader.addEventListener('loadend', () => {\n        $.post(wwwRoot + \"/local/chunkupload/startupload_ajax.php?\" + $.param(params), fileReader.result,\n            (a, b) => {\n                console.log(a, b);\n            }\n        );\n    });\n}\n\nfunction notifyError(errorstring) {\n    get_strings([\n        {key: 'error'},\n        errorstring,\n        {key: 'ok'},\n    ]).done(function(s) {\n            notification.alert(s[0], s[1], s[2]);\n        }\n    ).fail(notification.exception);\n}"],"file":"chunkupload.min.js"}